"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[9643],{42319:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if(!(0,r.default)(e)){var t;let n=null!=(t=null==e?void 0:e.type)?t:JSON.stringify(e);throw TypeError(`Not a valid node of type "${n}"`)}};var r=n(64559)},60545:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.assertAccessor=function(e,t){a("Accessor",e,t)},t.assertAnyTypeAnnotation=function(e,t){a("AnyTypeAnnotation",e,t)},t.assertArgumentPlaceholder=function(e,t){a("ArgumentPlaceholder",e,t)},t.assertArrayExpression=function(e,t){a("ArrayExpression",e,t)},t.assertArrayPattern=function(e,t){a("ArrayPattern",e,t)},t.assertArrayTypeAnnotation=function(e,t){a("ArrayTypeAnnotation",e,t)},t.assertArrowFunctionExpression=function(e,t){a("ArrowFunctionExpression",e,t)},t.assertAssignmentExpression=function(e,t){a("AssignmentExpression",e,t)},t.assertAssignmentPattern=function(e,t){a("AssignmentPattern",e,t)},t.assertAwaitExpression=function(e,t){a("AwaitExpression",e,t)},t.assertBigIntLiteral=function(e,t){a("BigIntLiteral",e,t)},t.assertBinary=function(e,t){a("Binary",e,t)},t.assertBinaryExpression=function(e,t){a("BinaryExpression",e,t)},t.assertBindExpression=function(e,t){a("BindExpression",e,t)},t.assertBlock=function(e,t){a("Block",e,t)},t.assertBlockParent=function(e,t){a("BlockParent",e,t)},t.assertBlockStatement=function(e,t){a("BlockStatement",e,t)},t.assertBooleanLiteral=function(e,t){a("BooleanLiteral",e,t)},t.assertBooleanLiteralTypeAnnotation=function(e,t){a("BooleanLiteralTypeAnnotation",e,t)},t.assertBooleanTypeAnnotation=function(e,t){a("BooleanTypeAnnotation",e,t)},t.assertBreakStatement=function(e,t){a("BreakStatement",e,t)},t.assertCallExpression=function(e,t){a("CallExpression",e,t)},t.assertCatchClause=function(e,t){a("CatchClause",e,t)},t.assertClass=function(e,t){a("Class",e,t)},t.assertClassAccessorProperty=function(e,t){a("ClassAccessorProperty",e,t)},t.assertClassBody=function(e,t){a("ClassBody",e,t)},t.assertClassDeclaration=function(e,t){a("ClassDeclaration",e,t)},t.assertClassExpression=function(e,t){a("ClassExpression",e,t)},t.assertClassImplements=function(e,t){a("ClassImplements",e,t)},t.assertClassMethod=function(e,t){a("ClassMethod",e,t)},t.assertClassPrivateMethod=function(e,t){a("ClassPrivateMethod",e,t)},t.assertClassPrivateProperty=function(e,t){a("ClassPrivateProperty",e,t)},t.assertClassProperty=function(e,t){a("ClassProperty",e,t)},t.assertCompletionStatement=function(e,t){a("CompletionStatement",e,t)},t.assertConditional=function(e,t){a("Conditional",e,t)},t.assertConditionalExpression=function(e,t){a("ConditionalExpression",e,t)},t.assertContinueStatement=function(e,t){a("ContinueStatement",e,t)},t.assertDebuggerStatement=function(e,t){a("DebuggerStatement",e,t)},t.assertDecimalLiteral=function(e,t){a("DecimalLiteral",e,t)},t.assertDeclaration=function(e,t){a("Declaration",e,t)},t.assertDeclareClass=function(e,t){a("DeclareClass",e,t)},t.assertDeclareExportAllDeclaration=function(e,t){a("DeclareExportAllDeclaration",e,t)},t.assertDeclareExportDeclaration=function(e,t){a("DeclareExportDeclaration",e,t)},t.assertDeclareFunction=function(e,t){a("DeclareFunction",e,t)},t.assertDeclareInterface=function(e,t){a("DeclareInterface",e,t)},t.assertDeclareModule=function(e,t){a("DeclareModule",e,t)},t.assertDeclareModuleExports=function(e,t){a("DeclareModuleExports",e,t)},t.assertDeclareOpaqueType=function(e,t){a("DeclareOpaqueType",e,t)},t.assertDeclareTypeAlias=function(e,t){a("DeclareTypeAlias",e,t)},t.assertDeclareVariable=function(e,t){a("DeclareVariable",e,t)},t.assertDeclaredPredicate=function(e,t){a("DeclaredPredicate",e,t)},t.assertDecorator=function(e,t){a("Decorator",e,t)},t.assertDirective=function(e,t){a("Directive",e,t)},t.assertDirectiveLiteral=function(e,t){a("DirectiveLiteral",e,t)},t.assertDoExpression=function(e,t){a("DoExpression",e,t)},t.assertDoWhileStatement=function(e,t){a("DoWhileStatement",e,t)},t.assertEmptyStatement=function(e,t){a("EmptyStatement",e,t)},t.assertEmptyTypeAnnotation=function(e,t){a("EmptyTypeAnnotation",e,t)},t.assertEnumBody=function(e,t){a("EnumBody",e,t)},t.assertEnumBooleanBody=function(e,t){a("EnumBooleanBody",e,t)},t.assertEnumBooleanMember=function(e,t){a("EnumBooleanMember",e,t)},t.assertEnumDeclaration=function(e,t){a("EnumDeclaration",e,t)},t.assertEnumDefaultedMember=function(e,t){a("EnumDefaultedMember",e,t)},t.assertEnumMember=function(e,t){a("EnumMember",e,t)},t.assertEnumNumberBody=function(e,t){a("EnumNumberBody",e,t)},t.assertEnumNumberMember=function(e,t){a("EnumNumberMember",e,t)},t.assertEnumStringBody=function(e,t){a("EnumStringBody",e,t)},t.assertEnumStringMember=function(e,t){a("EnumStringMember",e,t)},t.assertEnumSymbolBody=function(e,t){a("EnumSymbolBody",e,t)},t.assertExistsTypeAnnotation=function(e,t){a("ExistsTypeAnnotation",e,t)},t.assertExportAllDeclaration=function(e,t){a("ExportAllDeclaration",e,t)},t.assertExportDeclaration=function(e,t){a("ExportDeclaration",e,t)},t.assertExportDefaultDeclaration=function(e,t){a("ExportDefaultDeclaration",e,t)},t.assertExportDefaultSpecifier=function(e,t){a("ExportDefaultSpecifier",e,t)},t.assertExportNamedDeclaration=function(e,t){a("ExportNamedDeclaration",e,t)},t.assertExportNamespaceSpecifier=function(e,t){a("ExportNamespaceSpecifier",e,t)},t.assertExportSpecifier=function(e,t){a("ExportSpecifier",e,t)},t.assertExpression=function(e,t){a("Expression",e,t)},t.assertExpressionStatement=function(e,t){a("ExpressionStatement",e,t)},t.assertExpressionWrapper=function(e,t){a("ExpressionWrapper",e,t)},t.assertFile=function(e,t){a("File",e,t)},t.assertFlow=function(e,t){a("Flow",e,t)},t.assertFlowBaseAnnotation=function(e,t){a("FlowBaseAnnotation",e,t)},t.assertFlowDeclaration=function(e,t){a("FlowDeclaration",e,t)},t.assertFlowPredicate=function(e,t){a("FlowPredicate",e,t)},t.assertFlowType=function(e,t){a("FlowType",e,t)},t.assertFor=function(e,t){a("For",e,t)},t.assertForInStatement=function(e,t){a("ForInStatement",e,t)},t.assertForOfStatement=function(e,t){a("ForOfStatement",e,t)},t.assertForStatement=function(e,t){a("ForStatement",e,t)},t.assertForXStatement=function(e,t){a("ForXStatement",e,t)},t.assertFunction=function(e,t){a("Function",e,t)},t.assertFunctionDeclaration=function(e,t){a("FunctionDeclaration",e,t)},t.assertFunctionExpression=function(e,t){a("FunctionExpression",e,t)},t.assertFunctionParent=function(e,t){a("FunctionParent",e,t)},t.assertFunctionTypeAnnotation=function(e,t){a("FunctionTypeAnnotation",e,t)},t.assertFunctionTypeParam=function(e,t){a("FunctionTypeParam",e,t)},t.assertGenericTypeAnnotation=function(e,t){a("GenericTypeAnnotation",e,t)},t.assertIdentifier=function(e,t){a("Identifier",e,t)},t.assertIfStatement=function(e,t){a("IfStatement",e,t)},t.assertImmutable=function(e,t){a("Immutable",e,t)},t.assertImport=function(e,t){a("Import",e,t)},t.assertImportAttribute=function(e,t){a("ImportAttribute",e,t)},t.assertImportDeclaration=function(e,t){a("ImportDeclaration",e,t)},t.assertImportDefaultSpecifier=function(e,t){a("ImportDefaultSpecifier",e,t)},t.assertImportExpression=function(e,t){a("ImportExpression",e,t)},t.assertImportNamespaceSpecifier=function(e,t){a("ImportNamespaceSpecifier",e,t)},t.assertImportOrExportDeclaration=function(e,t){a("ImportOrExportDeclaration",e,t)},t.assertImportSpecifier=function(e,t){a("ImportSpecifier",e,t)},t.assertIndexedAccessType=function(e,t){a("IndexedAccessType",e,t)},t.assertInferredPredicate=function(e,t){a("InferredPredicate",e,t)},t.assertInterfaceDeclaration=function(e,t){a("InterfaceDeclaration",e,t)},t.assertInterfaceExtends=function(e,t){a("InterfaceExtends",e,t)},t.assertInterfaceTypeAnnotation=function(e,t){a("InterfaceTypeAnnotation",e,t)},t.assertInterpreterDirective=function(e,t){a("InterpreterDirective",e,t)},t.assertIntersectionTypeAnnotation=function(e,t){a("IntersectionTypeAnnotation",e,t)},t.assertJSX=function(e,t){a("JSX",e,t)},t.assertJSXAttribute=function(e,t){a("JSXAttribute",e,t)},t.assertJSXClosingElement=function(e,t){a("JSXClosingElement",e,t)},t.assertJSXClosingFragment=function(e,t){a("JSXClosingFragment",e,t)},t.assertJSXElement=function(e,t){a("JSXElement",e,t)},t.assertJSXEmptyExpression=function(e,t){a("JSXEmptyExpression",e,t)},t.assertJSXExpressionContainer=function(e,t){a("JSXExpressionContainer",e,t)},t.assertJSXFragment=function(e,t){a("JSXFragment",e,t)},t.assertJSXIdentifier=function(e,t){a("JSXIdentifier",e,t)},t.assertJSXMemberExpression=function(e,t){a("JSXMemberExpression",e,t)},t.assertJSXNamespacedName=function(e,t){a("JSXNamespacedName",e,t)},t.assertJSXOpeningElement=function(e,t){a("JSXOpeningElement",e,t)},t.assertJSXOpeningFragment=function(e,t){a("JSXOpeningFragment",e,t)},t.assertJSXSpreadAttribute=function(e,t){a("JSXSpreadAttribute",e,t)},t.assertJSXSpreadChild=function(e,t){a("JSXSpreadChild",e,t)},t.assertJSXText=function(e,t){a("JSXText",e,t)},t.assertLVal=function(e,t){a("LVal",e,t)},t.assertLabeledStatement=function(e,t){a("LabeledStatement",e,t)},t.assertLiteral=function(e,t){a("Literal",e,t)},t.assertLogicalExpression=function(e,t){a("LogicalExpression",e,t)},t.assertLoop=function(e,t){a("Loop",e,t)},t.assertMemberExpression=function(e,t){a("MemberExpression",e,t)},t.assertMetaProperty=function(e,t){a("MetaProperty",e,t)},t.assertMethod=function(e,t){a("Method",e,t)},t.assertMiscellaneous=function(e,t){a("Miscellaneous",e,t)},t.assertMixedTypeAnnotation=function(e,t){a("MixedTypeAnnotation",e,t)},t.assertModuleDeclaration=function(e,t){(0,s.default)("assertModuleDeclaration","assertImportOrExportDeclaration"),a("ModuleDeclaration",e,t)},t.assertModuleExpression=function(e,t){a("ModuleExpression",e,t)},t.assertModuleSpecifier=function(e,t){a("ModuleSpecifier",e,t)},t.assertNewExpression=function(e,t){a("NewExpression",e,t)},t.assertNoop=function(e,t){a("Noop",e,t)},t.assertNullLiteral=function(e,t){a("NullLiteral",e,t)},t.assertNullLiteralTypeAnnotation=function(e,t){a("NullLiteralTypeAnnotation",e,t)},t.assertNullableTypeAnnotation=function(e,t){a("NullableTypeAnnotation",e,t)},t.assertNumberLiteral=function(e,t){(0,s.default)("assertNumberLiteral","assertNumericLiteral"),a("NumberLiteral",e,t)},t.assertNumberLiteralTypeAnnotation=function(e,t){a("NumberLiteralTypeAnnotation",e,t)},t.assertNumberTypeAnnotation=function(e,t){a("NumberTypeAnnotation",e,t)},t.assertNumericLiteral=function(e,t){a("NumericLiteral",e,t)},t.assertObjectExpression=function(e,t){a("ObjectExpression",e,t)},t.assertObjectMember=function(e,t){a("ObjectMember",e,t)},t.assertObjectMethod=function(e,t){a("ObjectMethod",e,t)},t.assertObjectPattern=function(e,t){a("ObjectPattern",e,t)},t.assertObjectProperty=function(e,t){a("ObjectProperty",e,t)},t.assertObjectTypeAnnotation=function(e,t){a("ObjectTypeAnnotation",e,t)},t.assertObjectTypeCallProperty=function(e,t){a("ObjectTypeCallProperty",e,t)},t.assertObjectTypeIndexer=function(e,t){a("ObjectTypeIndexer",e,t)},t.assertObjectTypeInternalSlot=function(e,t){a("ObjectTypeInternalSlot",e,t)},t.assertObjectTypeProperty=function(e,t){a("ObjectTypeProperty",e,t)},t.assertObjectTypeSpreadProperty=function(e,t){a("ObjectTypeSpreadProperty",e,t)},t.assertOpaqueType=function(e,t){a("OpaqueType",e,t)},t.assertOptionalCallExpression=function(e,t){a("OptionalCallExpression",e,t)},t.assertOptionalIndexedAccessType=function(e,t){a("OptionalIndexedAccessType",e,t)},t.assertOptionalMemberExpression=function(e,t){a("OptionalMemberExpression",e,t)},t.assertParenthesizedExpression=function(e,t){a("ParenthesizedExpression",e,t)},t.assertPattern=function(e,t){a("Pattern",e,t)},t.assertPatternLike=function(e,t){a("PatternLike",e,t)},t.assertPipelineBareFunction=function(e,t){a("PipelineBareFunction",e,t)},t.assertPipelinePrimaryTopicReference=function(e,t){a("PipelinePrimaryTopicReference",e,t)},t.assertPipelineTopicExpression=function(e,t){a("PipelineTopicExpression",e,t)},t.assertPlaceholder=function(e,t){a("Placeholder",e,t)},t.assertPrivate=function(e,t){a("Private",e,t)},t.assertPrivateName=function(e,t){a("PrivateName",e,t)},t.assertProgram=function(e,t){a("Program",e,t)},t.assertProperty=function(e,t){a("Property",e,t)},t.assertPureish=function(e,t){a("Pureish",e,t)},t.assertQualifiedTypeIdentifier=function(e,t){a("QualifiedTypeIdentifier",e,t)},t.assertRecordExpression=function(e,t){a("RecordExpression",e,t)},t.assertRegExpLiteral=function(e,t){a("RegExpLiteral",e,t)},t.assertRegexLiteral=function(e,t){(0,s.default)("assertRegexLiteral","assertRegExpLiteral"),a("RegexLiteral",e,t)},t.assertRestElement=function(e,t){a("RestElement",e,t)},t.assertRestProperty=function(e,t){(0,s.default)("assertRestProperty","assertRestElement"),a("RestProperty",e,t)},t.assertReturnStatement=function(e,t){a("ReturnStatement",e,t)},t.assertScopable=function(e,t){a("Scopable",e,t)},t.assertSequenceExpression=function(e,t){a("SequenceExpression",e,t)},t.assertSpreadElement=function(e,t){a("SpreadElement",e,t)},t.assertSpreadProperty=function(e,t){(0,s.default)("assertSpreadProperty","assertSpreadElement"),a("SpreadProperty",e,t)},t.assertStandardized=function(e,t){a("Standardized",e,t)},t.assertStatement=function(e,t){a("Statement",e,t)},t.assertStaticBlock=function(e,t){a("StaticBlock",e,t)},t.assertStringLiteral=function(e,t){a("StringLiteral",e,t)},t.assertStringLiteralTypeAnnotation=function(e,t){a("StringLiteralTypeAnnotation",e,t)},t.assertStringTypeAnnotation=function(e,t){a("StringTypeAnnotation",e,t)},t.assertSuper=function(e,t){a("Super",e,t)},t.assertSwitchCase=function(e,t){a("SwitchCase",e,t)},t.assertSwitchStatement=function(e,t){a("SwitchStatement",e,t)},t.assertSymbolTypeAnnotation=function(e,t){a("SymbolTypeAnnotation",e,t)},t.assertTSAnyKeyword=function(e,t){a("TSAnyKeyword",e,t)},t.assertTSArrayType=function(e,t){a("TSArrayType",e,t)},t.assertTSAsExpression=function(e,t){a("TSAsExpression",e,t)},t.assertTSBaseType=function(e,t){a("TSBaseType",e,t)},t.assertTSBigIntKeyword=function(e,t){a("TSBigIntKeyword",e,t)},t.assertTSBooleanKeyword=function(e,t){a("TSBooleanKeyword",e,t)},t.assertTSCallSignatureDeclaration=function(e,t){a("TSCallSignatureDeclaration",e,t)},t.assertTSConditionalType=function(e,t){a("TSConditionalType",e,t)},t.assertTSConstructSignatureDeclaration=function(e,t){a("TSConstructSignatureDeclaration",e,t)},t.assertTSConstructorType=function(e,t){a("TSConstructorType",e,t)},t.assertTSDeclareFunction=function(e,t){a("TSDeclareFunction",e,t)},t.assertTSDeclareMethod=function(e,t){a("TSDeclareMethod",e,t)},t.assertTSEntityName=function(e,t){a("TSEntityName",e,t)},t.assertTSEnumBody=function(e,t){a("TSEnumBody",e,t)},t.assertTSEnumDeclaration=function(e,t){a("TSEnumDeclaration",e,t)},t.assertTSEnumMember=function(e,t){a("TSEnumMember",e,t)},t.assertTSExportAssignment=function(e,t){a("TSExportAssignment",e,t)},t.assertTSExpressionWithTypeArguments=function(e,t){a("TSExpressionWithTypeArguments",e,t)},t.assertTSExternalModuleReference=function(e,t){a("TSExternalModuleReference",e,t)},t.assertTSFunctionType=function(e,t){a("TSFunctionType",e,t)},t.assertTSImportEqualsDeclaration=function(e,t){a("TSImportEqualsDeclaration",e,t)},t.assertTSImportType=function(e,t){a("TSImportType",e,t)},t.assertTSIndexSignature=function(e,t){a("TSIndexSignature",e,t)},t.assertTSIndexedAccessType=function(e,t){a("TSIndexedAccessType",e,t)},t.assertTSInferType=function(e,t){a("TSInferType",e,t)},t.assertTSInstantiationExpression=function(e,t){a("TSInstantiationExpression",e,t)},t.assertTSInterfaceBody=function(e,t){a("TSInterfaceBody",e,t)},t.assertTSInterfaceDeclaration=function(e,t){a("TSInterfaceDeclaration",e,t)},t.assertTSIntersectionType=function(e,t){a("TSIntersectionType",e,t)},t.assertTSIntrinsicKeyword=function(e,t){a("TSIntrinsicKeyword",e,t)},t.assertTSLiteralType=function(e,t){a("TSLiteralType",e,t)},t.assertTSMappedType=function(e,t){a("TSMappedType",e,t)},t.assertTSMethodSignature=function(e,t){a("TSMethodSignature",e,t)},t.assertTSModuleBlock=function(e,t){a("TSModuleBlock",e,t)},t.assertTSModuleDeclaration=function(e,t){a("TSModuleDeclaration",e,t)},t.assertTSNamedTupleMember=function(e,t){a("TSNamedTupleMember",e,t)},t.assertTSNamespaceExportDeclaration=function(e,t){a("TSNamespaceExportDeclaration",e,t)},t.assertTSNeverKeyword=function(e,t){a("TSNeverKeyword",e,t)},t.assertTSNonNullExpression=function(e,t){a("TSNonNullExpression",e,t)},t.assertTSNullKeyword=function(e,t){a("TSNullKeyword",e,t)},t.assertTSNumberKeyword=function(e,t){a("TSNumberKeyword",e,t)},t.assertTSObjectKeyword=function(e,t){a("TSObjectKeyword",e,t)},t.assertTSOptionalType=function(e,t){a("TSOptionalType",e,t)},t.assertTSParameterProperty=function(e,t){a("TSParameterProperty",e,t)},t.assertTSParenthesizedType=function(e,t){a("TSParenthesizedType",e,t)},t.assertTSPropertySignature=function(e,t){a("TSPropertySignature",e,t)},t.assertTSQualifiedName=function(e,t){a("TSQualifiedName",e,t)},t.assertTSRestType=function(e,t){a("TSRestType",e,t)},t.assertTSSatisfiesExpression=function(e,t){a("TSSatisfiesExpression",e,t)},t.assertTSStringKeyword=function(e,t){a("TSStringKeyword",e,t)},t.assertTSSymbolKeyword=function(e,t){a("TSSymbolKeyword",e,t)},t.assertTSTemplateLiteralType=function(e,t){a("TSTemplateLiteralType",e,t)},t.assertTSThisType=function(e,t){a("TSThisType",e,t)},t.assertTSTupleType=function(e,t){a("TSTupleType",e,t)},t.assertTSType=function(e,t){a("TSType",e,t)},t.assertTSTypeAliasDeclaration=function(e,t){a("TSTypeAliasDeclaration",e,t)},t.assertTSTypeAnnotation=function(e,t){a("TSTypeAnnotation",e,t)},t.assertTSTypeAssertion=function(e,t){a("TSTypeAssertion",e,t)},t.assertTSTypeElement=function(e,t){a("TSTypeElement",e,t)},t.assertTSTypeLiteral=function(e,t){a("TSTypeLiteral",e,t)},t.assertTSTypeOperator=function(e,t){a("TSTypeOperator",e,t)},t.assertTSTypeParameter=function(e,t){a("TSTypeParameter",e,t)},t.assertTSTypeParameterDeclaration=function(e,t){a("TSTypeParameterDeclaration",e,t)},t.assertTSTypeParameterInstantiation=function(e,t){a("TSTypeParameterInstantiation",e,t)},t.assertTSTypePredicate=function(e,t){a("TSTypePredicate",e,t)},t.assertTSTypeQuery=function(e,t){a("TSTypeQuery",e,t)},t.assertTSTypeReference=function(e,t){a("TSTypeReference",e,t)},t.assertTSUndefinedKeyword=function(e,t){a("TSUndefinedKeyword",e,t)},t.assertTSUnionType=function(e,t){a("TSUnionType",e,t)},t.assertTSUnknownKeyword=function(e,t){a("TSUnknownKeyword",e,t)},t.assertTSVoidKeyword=function(e,t){a("TSVoidKeyword",e,t)},t.assertTaggedTemplateExpression=function(e,t){a("TaggedTemplateExpression",e,t)},t.assertTemplateElement=function(e,t){a("TemplateElement",e,t)},t.assertTemplateLiteral=function(e,t){a("TemplateLiteral",e,t)},t.assertTerminatorless=function(e,t){a("Terminatorless",e,t)},t.assertThisExpression=function(e,t){a("ThisExpression",e,t)},t.assertThisTypeAnnotation=function(e,t){a("ThisTypeAnnotation",e,t)},t.assertThrowStatement=function(e,t){a("ThrowStatement",e,t)},t.assertTopicReference=function(e,t){a("TopicReference",e,t)},t.assertTryStatement=function(e,t){a("TryStatement",e,t)},t.assertTupleExpression=function(e,t){a("TupleExpression",e,t)},t.assertTupleTypeAnnotation=function(e,t){a("TupleTypeAnnotation",e,t)},t.assertTypeAlias=function(e,t){a("TypeAlias",e,t)},t.assertTypeAnnotation=function(e,t){a("TypeAnnotation",e,t)},t.assertTypeCastExpression=function(e,t){a("TypeCastExpression",e,t)},t.assertTypeParameter=function(e,t){a("TypeParameter",e,t)},t.assertTypeParameterDeclaration=function(e,t){a("TypeParameterDeclaration",e,t)},t.assertTypeParameterInstantiation=function(e,t){a("TypeParameterInstantiation",e,t)},t.assertTypeScript=function(e,t){a("TypeScript",e,t)},t.assertTypeofTypeAnnotation=function(e,t){a("TypeofTypeAnnotation",e,t)},t.assertUnaryExpression=function(e,t){a("UnaryExpression",e,t)},t.assertUnaryLike=function(e,t){a("UnaryLike",e,t)},t.assertUnionTypeAnnotation=function(e,t){a("UnionTypeAnnotation",e,t)},t.assertUpdateExpression=function(e,t){a("UpdateExpression",e,t)},t.assertUserWhitespacable=function(e,t){a("UserWhitespacable",e,t)},t.assertV8IntrinsicIdentifier=function(e,t){a("V8IntrinsicIdentifier",e,t)},t.assertVariableDeclaration=function(e,t){a("VariableDeclaration",e,t)},t.assertVariableDeclarator=function(e,t){a("VariableDeclarator",e,t)},t.assertVariance=function(e,t){a("Variance",e,t)},t.assertVoidTypeAnnotation=function(e,t){a("VoidTypeAnnotation",e,t)},t.assertWhile=function(e,t){a("While",e,t)},t.assertWhileStatement=function(e,t){a("WhileStatement",e,t)},t.assertWithStatement=function(e,t){a("WithStatement",e,t)},t.assertYieldExpression=function(e,t){a("YieldExpression",e,t)};var r=n(64039),s=n(1157);function a(e,t,n){if(!(0,r.default)(e,t,n))throw Error(`Expected type "${e}" with option ${JSON.stringify(n)}, but instead got "${t.type}".`)}}}]);